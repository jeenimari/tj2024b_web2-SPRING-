[컴포넌트]
    01. 컴포넌트는 UI를 구성하는 독립적인 재사용 가능한 작은 단위

    02. HTML + CSS + JS를 하나의 파일로 관리가 가능하여 유지보수가 쉽다

[JSX]
    01. JS코드 안에서 HTML과 비슷한 문법을 사용할 수 있도록 만든 확장 문법

    02. 브라우저가 직접 JSX를 이해하지 못하므로 리액트가 렌더링이 필요

    03. 특징
        03-1. HTML처럼 보이지만 HTML과 다름
            ├─ 카멜표기법 필수 사용
            │    * 카멜표기법 : 첫단어의 첫글자는 소문자로 시작 두번째단어의 첫글자는 대문자 --> mycar -> myCar
            └─ 마크업 close 필수 사용<마크업></마크업>, <마크업 />
                예시 : <input/>

        03-2. 반드시 전체를 감싸는 상위 요소가 필수 (<div></div>, <></> --> 가능)
            ├─ return <div> 내용물 </div>
            └─ return <> 내용물 </>

        03-3. 두줄 이상의 문법을 작성할떄는 ( )로 감싼다.
            └─ return (
                <div>
                    내용물
                </div>
              )

        03-4. 문법에서 JS표현식이 가능 (선언식 X)
            └─ return <div> { 10 + 20 } </div>

        03-5. 주석처리
            └─ { /*주석처리*/ }

        03-6. CSS 사용법
            ├─ import '경로/파일명.css'
            ├─ class 속성명 대신 className속성명 사용
            └─ 인라인형식의 css는 카멜표기법
        
    04. JSX를 생성하는 방법
        ├─ 파일의 확장자를 .jsx로 생성
        ├─ 함수를 하나 생성 (매개변수 props는 필수)
        │   └─ function 함수명() {}
        ├─ 함수 안에서 return 뒤로 JSX문법을 작성
        └─ .JSX파일내에 기본적으로 import로 반환할 컴포넌트 함수를 선언
            ├─ export default function 함수명(props) {}
            └─ export default 함수명();

    05. 컴포넌트의 매개변수 props
        ├─ 부모 컴포넌트로부터 자식 컴포넌트에게 데이터를 전달하는 방식(방법)
        ├─ 자식은 전달받은 props는 읽기모드로 사용가능 (수정 불가능)
        └─ 사용법
            ├─ function 부모컴포넌트(props) {
            │    return (<> <자식 컴포넌트 속성명={값} 속성명={값}/> </>)
            │  }
            │
            └─ function 자식컴포넌트(props) {
                
               }