*용어
    1.프로그램 : 코드( 명령어 ) 의 집합
    2.프로세스 : 실행중인 프로그램
    3.멀티태스킹 : 두가지 이상의 작업을 동시 처리
    4.멀티프로세스 : 운영체제가 동시에 여러개 프로세스 생성하여 처리
        -멀티 프로세스 가 프로그램 단위의 멀티 태스킹
        -멀티 스레드는 프로그램 내부에서의 멀티태스킹


    [스레드]
        1.정의 : 프로세스 내에서 실행되는 작업단위 , 각 프로세스는 최소 1개의 스레드 포함
            -그래서 자바는 main 함수가 main 스레드를 포함하므로써 하나의 프로세스(프로그램)만들 수 있다.

        2. 목적 : 병렬처리
        3. 사용처 : 동기화/비동기화 처리 채팅(소켓 )/파일전송/RESTAPI / JDBC 등등
        4. 사용법
            Thread 클래스 : 새로운 스레드를 생성할때 사용되는 클래스 , 다른 클래스를 상속받을 수 없다.
                ->주 메소드
                    run() : 새로운 스레드가 처리( 실행 ) 할 코드 정의
                    start ( ) : 새로운 스레드 실행
       (1) Thread 상속
        class 클래스명 extends Thread{ @Overrride run()}
       (2) implements Runnable 구현 *
           class 클래스명 implements Runnable{
           @Override run(){}}

       (3) *익명구현체
            new Thread(new Runnable(){@Override run(){}  } );


       5.용어

       (*)          클래스 vs 인터페이스
       차이점        함수의구현    함수의 추상
                    멤버변수O     멤버변수 x 상수변수  o

       (*)

       Runable 인터페이스 : 새로운 스레드를 생성할때 사용되는 인터페이스 , 다른 클래스를 상속할 수 있다.
       -> 주 추상메소드
        run( ) : 새로운 스레드가 처리( 실행 ) 할 코드 정의
             extends     vs implements(구현)
    차이점    하나의클래스  vs 여러개의 인터페이스
             클래스상속    vs  인터페이스 구현

      (*)
      구현(객)체 : 추상메소드를 갖는 인터페이스를 구현한 클래스의 객체
      익명(객)체 : 추상메소드를 즉석에서 구현한 객체
            new 인터페이스명(){ ... }



      6.동기화 vs 동기화
      1.동기화 키워드 : synchronized
      2.동기화 사용법 :
      (방법1) 메소드 선언부의 반환타입 앞에'synchronized'키워드 입력
      (방법2) synchronized(this){ } 블럭 이용함

      3.동기화 목적
        멀티 스레드 에서 하나의 자원을 동시에 접근할때 충돌 방지

      4.비교
                동기화                         비동기화
      차이점     한번에 하나의 스레드가 처리  |    여러개의 스레드가 동시 처리
                    순서 보장됨             |     순서 보장 안됨.


.스레드 풀
1.정의 :  미리 일정 개수의 스레드를 생성하고 필요에 따라 재사용하는 방식
    -> 작업이 들어올때마다 새로운 스레드가 아닌 기존 스레드를 재사용
    2.목적 : 불필요한 스레드 제거, 자원효율 적으로 사용 가능 ,과부하 방지
    3.구조예시 : " "

        * 큐 : 작업의 순서를 요청순서대로 자료를 구조하는 방법
        ----------------------------------------------
    입구 [요청 4] [요청3 ] [요청 2 ][요청1 ]      출구
    -------------------------------------------------------

    큐[]


  5.사용처 : 1.톰캣 2. JDBC 3.파일처리 등등
  6.사용법
    1. 저애진 스레드 개수로 스레드풀 생성
        ExecutorService 변수명 = Executors.newFixedThreadPool(스레드 수);
    2.스레드풀에 스레드 등록
        변수명.submit(등록할 스레드)
    3.스레드풀 종료
        변수명.shutdown();


 [스프링 스레드]
 1.사용법
    1.AppStart 클래스 위에'@EnableAsync' 추가하여 톰캣 스레드와 별도의 비동기 기능 활성화
    2.비동기 기능을 적용할 메소드 위에 @Async 추가
    3.동기 기능을 적용할 메소드 반환 타입 앞에 'synchronized' 또는 synchronized(this){} 도 가능 키워드 붙임

 [스프링 스레드 풀]
    1.정의 : 스프링은 기본적으로 스레드풀을 사용한다. 최소
    2.커스텀 이용하여 스레드풀을 정의하기.



 [스프링 스케줄링]
 1.정의 : 일정한 간격으로 특정 메소드를 자동 실행 기능제공
 2. 목적: 백그라운드 ( 백엔드) 에서 자동실행
 3. 특정 시간에 자동 업무처리 등등

 3.사용법
    1.AppStart 클래스 위에 @EnableScheduling 추가하여 스케쥴링 기능활성화
    2.스케쥴링 적용할 메소드 위에 @Scheduled(패턴)어노테이션 추가하여 자동 메소드 실행

 4.패턴
    1.fixedRate 2. fixedDelay 3. cron(권장)중에서 사용
    (1) 크론(표현식)패턴
     기본 생김새 : @Scheduled(* * * * * *);
     초 분 시 일 월 요일


   (2)예시
    1.지정한 (5)초 마다 실행 : @Scheduled(cron="*5 * * * * *")
    2.지정한 (10분) 마다 실행 : @Scheduled(cron="0*/10 * * * *")
    3.지정한(1시)마다 실행 : @Scheduled(cron="0 0 *1 * * *")
    4.매월 1일에 오전 9시에 실행 : @Scheduled(cron = "0 0 9 1 * *")
    5.일요일마다 오전11시 실행 : @Scheduled(cron = "0 0 11 1 * 0") 0또는 SUN

6. 주의할점 : REST API response 안됨
-> 백그라운드 처리 이므로 HTTP  response 불가
-> http 프로토콜 vs w(web)(soket) 프로토콜
차이점     무상태(연결유지안함) |     연결유지함