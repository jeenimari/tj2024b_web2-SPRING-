[DI] 의존성 주입  [IOC] 제어의 역전

언제 ? when
애플리케이션 시작시 스프링이 필요한 객체 생성
객체가 필요한 시점에 스프링이 자동 주입

어디서 ? where?
스프링 컨테이너 내부에서 동작
@Component, @Service, @Controller 등의 어노테이션이 붙은 클래스들을 대상으로 함


누가? (Who)

스프링 프레임워크가 담당
개발자는 설정만 제공



어떻게? (How)

생성자 주입
필드 주입
Setter 주입


왜? (Why)

코드 유연성
유지보수 용이


실생활 비유:

DI는 레고 블록과 같습니다


블록(객체)들은 서로 끼워맞춰질 수 있게 설계됨
어떤 블록을 끼울지는 사용자(스프링)가 결정


IoC는 호텔 서비스와 같습니다


손님(개발자)은 서비스 요청만 함
호텔(스프링)이 알아서 직원을 배치하고 서비스 제공


[ IOC ] : (Inversion of Control) 제어의 역전
    1. 정의 : 객체의 생성(new) 및 관리의 제어권을 개발자가 아닌 스프링 프레임워크가 담당한다.
    2. 스프링에서는 컨테이너 가 이를 대신 한다.
    즉] 객체의 생성과 관리를 스프링이 한다.
    3. 컨테이너 등록하는 방법 : 클래스 위에 빈 등록 어노테이션 사용한다.
        @Component
        @Controller @RestController @Service @Repository @Mapper 등등 : 다른 기능들과 포함하여 제공한다.
[ DI ] : (Dependency Injection) 의존성 주입
    1. 객체를 직접 생성하지 않고 외부(스프링 컨테이너)로 부터 주입받도록 하는 방법
    2. 객체들간의 결합도를 낮추고 유지보수성를 향상한다.
    3. 방법 @Autowired
        (1) 필드(멤버변수)에 주입 , 코드 간결
        @Autowired 클래스명 변수명;

        (2) 생성자 에 주입 *권장
        final 클래스명 변수명;
        @Autowired
        public 클래스명( 클래스명 매개변수명 ){
            this.변수명 = 매개변수명;
        }

        (3) Setter 를 이용한 주입
        클래스명 변수명;
        @Autowired
        public void setXXX( 클래스명 매개변수명 ){
            this.변수명 = 매개변수명;
        }