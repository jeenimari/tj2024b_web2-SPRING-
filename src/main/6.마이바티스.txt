[DAO : JDBC ] java database connection
    - 자바에서 데이터베이 와 상호작용 하기 위한 자바 표준 라이브러리
    - sql 직접 작성하고 실행하며 데이터베이스 연결과 관리함
    - 주요 인터페이스
        1.Connection    : 데이터베이스 연결 관리
        2.PreparedStatement : SQL 실행 과 매개변수 관리
        3.ResultSet : SQL 실행 결과(조회 데이터) 관리

[마이바티스]MyBatis
    -JDBC 보다 조금 더 다양한 기능을 제공하는 프레임 워크
    - 객체와 데이터베이스 간의 매핑을 자동화 함
    - 주요 특징
     1.SQL 매핑 : SQL XML파일에 작성하여 자바 객체와 매핑
     2.결과 매핑 : SQL 쿼리 결과를 자동으로 자바 객체로 자동 타입변환
     3.유연성 : 복잡한 쿼리 와 제어도 가능함. VS JPA
     4.스프링과 통합 가능.
  1.프로젝트 마이바티스 설치

    // [1] 스프링 웹 라이브러리

    //[2]롬복 라이브러리

    //[3] JDBC 라이브러리
     implementation 'org.springframework.boot:spring-boot-starter-jdbc'

    //[4] 마이바티스 라이브러리
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'

 2.application.properties ( 스프링 프레임워크가 실행될 때 읽어드리는 설정파일)

    위치 : src -> main ->resource 폴더 하위에 존재 해야함.

    1.[JDBC 연동]
    spring.datasource.rl = jdbc:mysql://IP주소 : PORT 번호/DB이름
    spring.datasource.username=DB계정명
    Spring.datasource.password=DB계정비밀번호

    2.[XML 파일경로설정 ]마이바티스는 XML 파일 이용하여 자바 객체와 매핑하는 기술
    *주로 resources 폴더 하위에서 작업
    *.xml 파일이 존재하는 경로 설정하는 코드
    mybatis.mapper-location = classpath:resource 하위폴더 경로 설정

3. 자바 와 매핑
    1.xml 파일 만들기
        ->설정한 파일의

        2.xml 파일상단에 mybatis 연동 코드 작성

            <?xml version="1.0" encoding="UTF-8" ?>
            <!DOCTYPE mapper
                    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

   3.해당 xml과 연동할 엔터페이스명 설정
   <mapper namespace ="src->main->java부터 경로 매핑할인터페이스명">
   -매핑할 인터페이스명이 위치한 경로까지 포함
   -src ->main->java  폴더명.폴더명.폴더명.인터페이스명

   4.<mapper></mapper>사이에 sql 마크업 이용한 sql 작성

   <insert></insert>
   <select></select>
   <update></update>
   <delete></delete>

   2.쿼리의 매개변수 지원.
   <마크업명 parameterType="매개변수DTO">
    #{매개변수명}
    </마크업명>

   *주의할점 : DTO 에 존재하지 않는 매개변수명은 자동매핑이 불가능하다
   !!! DTO 필드명/ 멤버변수명 /

@SQL 매핑하는 방법 : 1.xml파일에 작성된 sql 매핑 or 2.@SQL 어노테이션 매핑
   [2]어노테이션 활용
   1.@insert("sql문")
   2.@Select("sql문")
   3.@Update("sql문")
   4.@Delete("sql문")

    *.@XXX("SQL문 # {} ")
    1.#{매개변수} : SQL 에 대입할 값이 들어잇는 변수명
    2.자동리턴값
        int : sql이 실행후 처리된 레코드 수 반환
        boolean : sql이 정상적으로 실행했다면 true/ 아니면 false 반환
        Map<Object ,object> : select
        rs =ps.executeQuery();
        if(rs.next(){return true;}

        *@Options(use GeneratedKeys = true , keyProperty = "pk명")
            ->sql 생성된 pk 값을 반환하는 어노테이션
            ->keyProperty : "대입할pk필드명" : 매개변수

   4.스프링 에서 실행 될 때 DML 과 DDL 파일들을 읽어드리는 기능 제공
   1.resource 폴더 아래에
        -schema.sql 파일 : DDL[create drop alter] SQL문 작성
            ->테이블 생성 sql 들어가면됨
            ->
        -data.sql 파일 : DML[insert select update delete] SQL 문 작성
            ->

   2.application.properties
    spring.sql.init.mode = always/never/embedded

    1.always : schema.sql , data.sql 읽어서 실행 [ 개발중 ]
    2.never : schema.sql , data.sql 읽어서 실행하지 않는다.[운영중]
    3.embedded(기본값) : [내장데이터 베이스 H2 = 테스트 목적 ] 실행되고 외부 DB(MYSQL등) 실행 안된다.


5.동적 쿼리
    1.정의 : SQL 실행 시점에서 mybatis 에서 제공하는 문법이 SQL에 구성하는 방법
    2.종류
        IF
            <if test="조건식">
                조건이 참일떄 SQL문
                </if>

        2.FOREACH
            <foreach collection="(리스트/배열)매개변수명" item="반복변수명" separator="반복사이문자">
            반복할 SQL문 ,#{반복변수명.필드명}
            </foreach>
