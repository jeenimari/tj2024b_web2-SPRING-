[AXIOS] : 비동기 통신
    01. 대표적인 비동기 통신 함수
        - Fetch --> 자바스크립트 내장 함수
        - axios --> Axois.js
    02. 특징
        - *JSON타입으로 자동 변환*
        - Node.js환경을 지원, CSRF

    03. 설치
        js(CDN) : <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        react(npm) : ~

    04. 문법
        - axios.HTTP메소드명("통신할HTTP주소", {body}, {option})
            - HTTP메소드명 : axios.post(), axios.get(), axios.put(), axios.delete()
            - 통신할HTTP주소 : 스프링환경에서는 RestController에서 정의한 매핑 주소
                - [내부서버]
                    @GetMapping("/day04/student") ----> "/day04/student"
                - [외부서버] https:// ~~~

            - body : 보내고자 하는 자료/데이터 객체{}
                - body 사용   : POST, PUT
                - body 미사용 : GET, DELETE

            - option : HTTP header 설정
                - 기본값은 content-type : "application/json"
                - {headers : {Content-Type : "application/json"}} --> 기본값
                - {headers : {Content-Type : "multipart/form-data"}} --> 폼데이터 전송

    05. 동기화 관례적인 유형들 : 여러개의 통신을 순차 처리 할 경우 주로 동기화, 여러개의 통신을 동시 처리 할 경우에는 주로 비동기화
        05-1. 동기화 유형1
            () => {
                axios.post("", {}, {})
                .then(response => { console.log(response.data); })
                .catch(error => { console.log(error); })
            }

        05-2. 동기화 유형2, .then O / .catch O
            async () => {
                await axios.post("", {}, {})
                .then(response => { console.log(response.data); })
                .catch(error => { console.log(error); })
            }

        05-3. 동기화 유형3, .then X / .catch X
            async () => {
                try {
                    let response = await axios.post("", {}, {});
                    console.log(response.data);
                } catch(error) {
                    console.log(error);
                }
            }
    06. CORS policy (Cross Origin Resource Sharing 정책)
        - 정의 : 브라우저에서 다른 도메인(HTTP주소)의 리소스(자료)를 요청할 때 발생하는 보안 정책
        - 목적 : 2009년 표준화된 보안 정책 SOP(Same-Origin-Policy) --> 동일한 도메인끼리만 공유를 허용
            - SOP VS CORS
        - 방법
            - [문제점]
                - JS(localhost:8080) --------> spring(localhost:8080)
                    - 도메인이 같으므로 문제 없음

                - React(localhost:5173) --------> spring(localhost:8080)
                    - 서로 다른 도메인이므로 문제 있음

            - [해결방안]
                - 서로 다른 도메인간의 리소스 공유를 허용
                - 스프링 서버 허용 방법
                    - Controller클래스 위에 @CrossOrigin("허용할도메인주소")
                        - @CrossOrigin("http://localhost:5173") : 해당 클래스는 리액트 서버를 허용

    * 도메인
        - http://192.168.40.64:8080 : ip:port 주소(숫자)
        - https://www.naver.com     : ip:port 주소(숫자 --> 문자) DNS(Domain Name Service)
            - 예시 : 우편번호(숫자) ----> 도로명 주소(문자)